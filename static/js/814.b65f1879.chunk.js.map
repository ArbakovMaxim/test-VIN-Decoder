{"version":3,"file":"static/js/814.b65f1879.chunk.js","mappings":"uPAEaA,EAAWC,EAAAA,GAAAA,IAAH,2DAKRC,EAAYD,EAAAA,GAAAA,GAAH,iMASTE,EAAaF,EAAAA,GAAAA,GAAH,qH,SCdVG,EAAW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBACzB,OACE,SAACH,EAAD,UACGG,EAAiBC,KAAI,SAAAC,GAAe,OACnC,UAACJ,EAAD,YACE,wBAAKI,EAAgBC,QACrB,uCAAeD,EAAgBE,aAC9BF,EAAgBG,eACf,SAACV,EAAD,CACEW,IAAG,0CAAqCJ,EAAgBG,cACxDE,IAAKL,EAAgBC,SANVD,EAAgBM,iB,8BCiBzC,EAjBa,WACX,OAAgDC,EAAAA,EAAAA,UAAS,IAAzD,eAAOT,EAAP,KAAyBU,EAAzB,KACQC,GAAOC,EAAAA,EAAAA,IAAU,IAAjBD,GAYR,OAVAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGACEC,EAAAA,GAAkBJ,GADpB,QACZK,EADY,SAGhBN,EAAoBM,GAHJ,2CAAH,qDAMjBF,MACC,CAACH,KAEG,SAACZ,EAAD,CAAUC,iBAAkBA,M,0MCpBxBiB,EACF,mCADEA,EAED,gC,UCECF,EAAMG,IAAAA,OAAa,CAC9BC,QAASF,EACTG,OAAQ,CACNC,QAASJ,EACTK,SAAU,QACVC,eAAe,KAINC,EAAiB,mCAAG,6GAERT,EAAIU,IAAJ,sBAFQ,YAEvBC,EAFuB,iDAIpBA,EAAOC,KAAKC,SAJQ,UAMM,IAA/BF,EAAOC,KAAKC,QAAQC,OANK,yCAOpBC,EAAAA,GAAAA,KACL,mUARyB,kFAYtBA,EAAAA,GAAAA,KAAA,OAZsB,0DAAH,qDAgBjBC,EAAa,mCAAG,WAAMpB,GAAN,gGAELI,EAAIU,IAAJ,gBAAiBd,EAAjB,aAFK,YAEnBK,EAFmB,iDAIhBA,EAAMW,KAAKK,MAJK,uDAOzBC,QAAQC,IAAR,MAPyB,yDAAH,sDAWbC,EAAgB,mCAAG,WAAMxB,GAAN,gGAEPI,EAAIU,IAAJ,gBAAiBd,EAAjB,aAFO,YAEtByB,EAFsB,iDAInBA,EAAOT,KAAKC,SAJO,gFAOrBE,EAAAA,GAAAA,KAAA,OAPqB,yDAAH,sDAWhBO,EAAe,mCAAG,WAAMC,GAAN,gGAENvB,EAAIU,IAAJ,eAAwB,CAC3CL,OAAQ,CACNmB,MAAOD,KAJgB,YAErBZ,EAFqB,iDAQlBA,EAAOC,KAAKC,SARM,uDAW3BE,EAAAA,GAAAA,KAAA,MAX2B,yDAAH,sDAefU,EAAa,mCAAG,WAAM7B,GAAN,gGAEJI,EAAIU,IAAJ,gBAAiBd,IAFb,YAEnBe,EAFmB,iDAIhBA,GAJgB,gFAOlBI,EAAAA,GAAAA,KAAA,OAPkB,yDAAH","sources":["components/CastInfo/CastInfo.styled.js","components/CastInfo/CastInfo.jsx","pages/FilmInfo/Cast/Cast.jsx","constants/constants.js","services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ImgActor = styled.img`\n  width: 150px;\n  height: 200px;\n`;\n\nexport const ListActor = styled.ul`\n  display: grid;\n  list-style: none;\n  grid-template-columns: repeat(auto-fill, 360px);\n  justify-content: space-between;\n  flex-flow: wrap;\n  text-align: center;\n`;\n\nexport const ItemsActor = styled.li`\n  padding: 20px;\n  margin: 10px;\n  border: 1px solid black;\n  background-color: #d7d7d7;\n`;\n","import { ImgActor, ItemsActor, ListActor } from './CastInfo.styled';\n\nexport const CastInfo = ({ moviesInfoActors }) => {\n  return (\n    <ListActor>\n      {moviesInfoActors.map(moviesInfoActor => (\n        <ItemsActor key={moviesInfoActor.credit_id}>\n          <h3>{moviesInfoActor.name}</h3>\n          <p>Character: {moviesInfoActor.character}</p>\n          {moviesInfoActor.profile_path && (\n            <ImgActor\n              src={`https://image.tmdb.org/t/p/w500/${moviesInfoActor.profile_path}`}\n              alt={moviesInfoActor.name}\n            />\n          )}\n        </ItemsActor>\n      ))}\n    </ListActor>\n  );\n};\n","import { CastInfo } from 'components/CastInfo/CastInfo';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as api from 'services/Api';\n\nconst Cast = () => {\n  const [moviesInfoActors, setMoviesInfoActors] = useState([]);\n  const { id } = useParams('');\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const actor = await api.getMoviesCast(id);\n      if (actor) {\n        setMoviesInfoActors(actor);\n      }\n    };\n    fetchMovies();\n  }, [id]);\n\n  return <CastInfo moviesInfoActors={moviesInfoActors} />;\n};\n\nexport default Cast;\n","export const constantsApi = {\n  API_KEY: '40792e31f61894f4069807b40dd76a51',\n  BASE_URL: 'https://api.themoviedb.org/3/',\n};\n","import axios from 'axios';\nimport { constantsApi } from 'constants/constants';\nimport { toast } from 'react-toastify';\n\nexport const api = axios.create({\n  baseURL: constantsApi.BASE_URL,\n  params: {\n    api_key: constantsApi.API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const getMoviesTrending = async () => {\n  try {\n    const movies = await api.get(`trending/movie/day`);\n    if (movies) {\n      return movies.data.results;\n    }\n    if (movies.data.results.length === 0) {\n      return toast.info(\n        'по вашему запросу не чего не найденно,ищите что-то адекватное. '\n      );\n    }\n  } catch (error) {\n    return toast.info(error);\n  }\n};\n\nexport const getMoviesCast = async id => {\n  try {\n    const actor = await api.get(`movie/${id}/credits`);\n    if (actor) {\n      return actor.data.cast;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesReviews = async id => {\n  try {\n    const author = await api.get(`movie/${id}/reviews`);\n    if (author) {\n      return author.data.results;\n    }\n  } catch (error) {\n    return toast.info(error);\n  }\n};\n\nexport const getSearchMovies = async search => {\n  try {\n    const movies = await api.get(`search/movie`, {\n      params: {\n        query: search,\n      },\n    });\n    if (movies) {\n      return movies.data.results;\n    }\n  } catch (error) {\n    toast.info(error);\n  }\n};\n\nexport const getMoviesInfo = async id => {\n  try {\n    const movies = await api.get(`movie/${id}`);\n    if (movies) {\n      return movies;\n    }\n  } catch (error) {\n    return toast.info(error);\n  }\n};\n"],"names":["ImgActor","styled","ListActor","ItemsActor","CastInfo","moviesInfoActors","map","moviesInfoActor","name","character","profile_path","src","alt","credit_id","useState","setMoviesInfoActors","id","useParams","useEffect","fetchMovies","api","actor","constantsApi","axios","baseURL","params","api_key","language","include_adult","getMoviesTrending","get","movies","data","results","length","toast","getMoviesCast","cast","console","log","getMoviesReviews","author","getSearchMovies","search","query","getMoviesInfo"],"sourceRoot":""}