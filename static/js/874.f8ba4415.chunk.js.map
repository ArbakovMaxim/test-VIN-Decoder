{"version":3,"file":"static/js/874.f8ba4415.chunk.js","mappings":"gRAEaA,E,QAAoBC,GAAAA,GAAH,6C,SCAjBC,EAAc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAC5B,OACE,SAACH,EAAD,UACGG,EAAkBC,KAAI,SAAAC,GAAgB,OACrC,2BACE,qCAAaA,EAAiBC,WAC9B,uBAAID,EAAiBE,YAFdF,EAAiBG,UC6BlC,EA5BgB,WACd,OAAkDC,EAAAA,EAAAA,UAAS,IAA3D,eAAON,EAAP,KAA0BO,EAA1B,KACQF,GAAOG,EAAAA,EAAAA,IAAU,IAAjBH,GAYR,OAVAI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,oGACGC,EAAAA,GAAqBN,GADxB,QACZF,EADY,SAGhBI,EAAqBJ,GAHL,2CAAH,qDAMjBO,MACC,CAACL,KAGF,8BACgC,IAA7BL,EAAkBY,QACjB,yBACG,IADH,6TAKA,SAACb,EAAD,CAAaC,kBAAmBA,Q,0MC7B3Ba,EACF,mCADEA,EAED,gC,UCECF,EAAMG,IAAAA,OAAa,CAC9BC,QAASF,EACTG,OAAQ,CACNC,QAASJ,EACTK,SAAU,QACVC,eAAe,KAINC,EAAiB,mCAAG,6GAERT,EAAIU,IAAJ,sBAFQ,YAEvBC,EAFuB,iDAIpBA,EAAOC,KAAKC,SAJQ,UAMM,IAA/BF,EAAOC,KAAKC,QAAQZ,OANK,yCAOpBa,EAAAA,GAAAA,KACL,mUARyB,kFAYtBA,EAAAA,GAAAA,KAAA,OAZsB,0DAAH,qDAgBjBC,EAAa,mCAAG,WAAMrB,GAAN,gGAELM,EAAIU,IAAJ,gBAAiBhB,EAAjB,aAFK,YAEnBsB,EAFmB,iDAIhBA,EAAMJ,KAAKK,MAJK,uDAOzBC,QAAQC,IAAR,MAPyB,yDAAH,sDAWbC,EAAgB,mCAAG,WAAM1B,GAAN,gGAEPM,EAAIU,IAAJ,gBAAiBhB,EAAjB,aAFO,YAEtBF,EAFsB,iDAInBA,EAAOoB,KAAKC,SAJO,gFAOrBC,EAAAA,GAAAA,KAAA,OAPqB,yDAAH,sDAWhBO,EAAe,mCAAG,WAAMC,GAAN,gGAENtB,EAAIU,IAAJ,eAAwB,CAC3CL,OAAQ,CACNkB,MAAOD,KAJgB,YAErBX,EAFqB,iDAQlBA,EAAOC,KAAKC,SARM,uDAW3BC,EAAAA,GAAAA,KAAA,MAX2B,yDAAH,sDAefU,EAAa,mCAAG,WAAM9B,GAAN,gGAEJM,EAAIU,IAAJ,gBAAiBhB,IAFb,YAEnBiB,EAFmB,iDAIhBA,GAJgB,gFAOlBG,EAAAA,GAAAA,KAAA,OAPkB,yDAAH,uD","sources":["components/ListReviews/ListReviews.styled.js","components/ListReviews/ListReviews.jsx","pages/FilmInfo/Reviews/Reviews.jsx","constants/constants.js","services/Api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListReviewsStyled = styled.ul`\n  list-style: none;\n`;\n","import { ListReviewsStyled } from './ListReviews.styled';\n\nexport const ListReviews = ({ MoviesInfoAuthors }) => {\n  return (\n    <ListReviewsStyled>\n      {MoviesInfoAuthors.map(MoviesInfoAuthor => (\n        <li key={MoviesInfoAuthor.id}>\n          <h4>Author: {MoviesInfoAuthor.author}</h4>\n          <p>{MoviesInfoAuthor.content}</p>\n        </li>\n      ))}\n    </ListReviewsStyled>\n  );\n};\n","import 'react-toastify/dist/ReactToastify.css';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as api from 'services/Api';\nimport { ListReviews } from 'components/ListReviews/ListReviews';\n\nconst Reviews = () => {\n  const [MoviesInfoAuthors, setMoviesInfoAuthors] = useState([]);\n  const { id } = useParams('');\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const author = await api.getMoviesReviews(id);\n      if (author) {\n        setMoviesInfoAuthors(author);\n      }\n    };\n    fetchMovies();\n  }, [id]);\n\n  return (\n    <>\n      {MoviesInfoAuthors.length === 0 ? (\n        <p>\n          {' '}\n          'Ни одна живая душа, не вснезошла до описания данного фильма....'\n        </p>\n      ) : (\n        <ListReviews MoviesInfoAuthors={MoviesInfoAuthors} />\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","export const constantsApi = {\n  API_KEY: '40792e31f61894f4069807b40dd76a51',\n  BASE_URL: 'https://api.themoviedb.org/3/',\n};\n","import axios from 'axios';\nimport { constantsApi } from 'constants/constants';\nimport { toast } from 'react-toastify';\n\nexport const api = axios.create({\n  baseURL: constantsApi.BASE_URL,\n  params: {\n    api_key: constantsApi.API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  },\n});\n\nexport const getMoviesTrending = async () => {\n  try {\n    const movies = await api.get(`trending/movie/day`);\n    if (movies) {\n      return movies.data.results;\n    }\n    if (movies.data.results.length === 0) {\n      return toast.info(\n        'по вашему запросу не чего не найденно,ищите что-то адекватное. '\n      );\n    }\n  } catch (error) {\n    return toast.info(error);\n  }\n};\n\nexport const getMoviesCast = async id => {\n  try {\n    const actor = await api.get(`movie/${id}/credits`);\n    if (actor) {\n      return actor.data.cast;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesReviews = async id => {\n  try {\n    const author = await api.get(`movie/${id}/reviews`);\n    if (author) {\n      return author.data.results;\n    }\n  } catch (error) {\n    return toast.info(error);\n  }\n};\n\nexport const getSearchMovies = async search => {\n  try {\n    const movies = await api.get(`search/movie`, {\n      params: {\n        query: search,\n      },\n    });\n    if (movies) {\n      return movies.data.results;\n    }\n  } catch (error) {\n    toast.info(error);\n  }\n};\n\nexport const getMoviesInfo = async id => {\n  try {\n    const movies = await api.get(`movie/${id}`);\n    if (movies) {\n      return movies;\n    }\n  } catch (error) {\n    return toast.info(error);\n  }\n};\n"],"names":["ListReviewsStyled","styled","ListReviews","MoviesInfoAuthors","map","MoviesInfoAuthor","author","content","id","useState","setMoviesInfoAuthors","useParams","useEffect","fetchMovies","api","length","constantsApi","axios","baseURL","params","api_key","language","include_adult","getMoviesTrending","get","movies","data","results","toast","getMoviesCast","actor","cast","console","log","getMoviesReviews","getSearchMovies","search","query","getMoviesInfo"],"sourceRoot":""}